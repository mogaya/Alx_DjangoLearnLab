!! Django REST Framework
- Provides a structured and efficient way to build APIs with Django by simplifying common tasks like data serialization, validation, authentication, and permission handling.

! Benefits of DRF
- 1. Serialization: Simplifies the process of converting complex data structures, such as Django models, into formats like JSON or XML making it suitable for consumption by various clients
- 2. ViewSets and Routers: Offers ViewSets and routers that streamline the process of creating API endpoints, reducing boilerplate code and promoting consistency
- 3. Authentication and Permissions: Provides built-in support for various authentication methods and permission policies, ensuring secure access to API
- 4. Browsable API: Includes a browserable API interface that allows devs to easily interact with and test API endpoints directly from a web browserable

! Creating 1st API Endpoint
STEPS
x 1. Create a new Django project and app
django-admin startproject my_project
cd my_project
python manage.py startapp my_app

x 2. Install Django REST Framework package
pip install djangorestframework

x 3. Add `rest_framework` to your `INSTALLED_APPS` in the `settings.py` file
INSTALLED_APPS = [
    ...
    'rest_framework'
]

x 4. Define your first model in the `models.py` file of your app
from djongo.db import models

class Book(models.Model):
    title = models.CharField(max_length=200)
    author = models.CharField(max_length=100)
    published_date = models.DateField()

x 5. Create a serializer for your model in the `serializer.py` file
from rest_framework import serializers
from .models import Book

class BookSerializer(serializers.ModelSerializer):
    class Meta:
        model = Book
        fields = '__all__'

x 6. Define a view for your model in the `views.py` file
from rest_framework import generics
from .models import MyModel
from .serializers import MyModelSerializer

class BookListCreateAPIView(generics.ListCreateAPIView):
    queryset = Book.objects.all()
    serializer_class = BookSerializer

x 7. Add URL pattern for your view in the `urls.py` file
pythonCopy codefrom django.urls import path
from .views import BookListCreateAPIView

urlpatterns = [
    path("api/books", views.BookListCreateAPIView.as_view(), name="book_list_create"),
]

x 8. Start the dev server and access your API endpoint at `http://localhost:8000/my-models/`
python manage.py runserver

! Additional Resources
1. Django REST Framework Documentation - https://intranet.alxswe.com/rltoken/QA9zgJr1kahEjildq8YOiw
2. DRF Tutorial - https://intranet.alxswe.com/rltoken/ohhPKKgWOafYixV_x6gghQ



!! Selializers and QuerySets in DRF
- Serializers manage data conversion, validation and presentation while querysets handle data retrieval and filtering from the db

! Serializers: Data Conversion and validation
- Serializers are responsible for converting complex data types such as model instances and querysets, into py data types that can easily be rendered into various fprmats (e.g JSON, XML, YAML). This process is known as 'Serialization'
- Serializers also handle deserialization of data, converting incoming data (e.g from a POST or PUT request) into py data types that can be used to create or update model instances
- Also handle validation during deseralization, ensuring data integrity

- a basic serializer can be defined as follows:

# CODE
from rest_framework import serializers
from .models import MyModel

class MyModelSerializer(serializers.ModelSerializer):
    class Meta:
        model = MyModel
        fields = ['id', 'name', 'description', 'created_at']

# In this example the `MyModelSerializer` is responsible for serializing and deserializing instances of the `MyModel` model. The `fields` attribute specifies which model fields should be included in the serialized output

x Serializer Types
- 1. ModelSerializer: Automates serializer creation based on a Django model, including field definition and basic validation
- 2. HyperlinkedModelSerializer: Extends ModelSerializer to include hyperlinks to related models
- 3. Serializer: Provides a base class for creating custom serializers with more control over fields and validation


! validation
- DRF serializers include built-in validation mechanisms to ensure data integrity.
- Validation rules can be defined using various methods, such as: field-level validation, object-level validation and custom functions.
- You can define custom validation rules by overriding the validate method in your serializer

# CODE
from rest_framework import Serializers
from .models import MyModel

class MyModelSerializer(serializers.ModelSerializer):
    class Meta:
        model = MyModel
        fields = ['id', 'name', 'description', 'created_at']

    def validate(self, data):
        if len(data['name']) < 5:
            raise serializers.ValidationError("Name must be at least 5 characters long")
        return data

# Validate method checks if the name field in the incoming data is at least 5 character long. If the validation fails, a `validatorError` is raised, which will be returned to the client in the response

! Customizing Serializers
- Common customization options

x 1. Adding custom fields
- Custom fields that are not directly mapped to model fields can be added to the serializer

x 2. Performing validation
- Serializers can validate incoming data before creating or updating model instances

x 3. Handling complex data structures
- Serializers can handle nested data structures, such as one-to-many or many-to-many relationships

x 4. Overriding default behaviour
- One can ovveride the drefault serialization and deseralization logic to implement custom logic

# CODE - Example of a customized serializer that includes a custom field

from rest_framework import serializers
from .models import MyModel

class MyModelSerializer(serializers.ModelSerializer):
    days_since_created = serializers.SerializerMethodField()

    class Meta:
        model = MyModel
        fields = ['id', 'name', 'description', 'created_at', 'days_since_created']

    def get_days_since_created(self, obj):
        from datetime import datetime, timezone
        return (datetime.now(timezone.utc) - obj.created_at).days

# `days_since_created` field is a custom field that calculates the number of days since the model instance was created


! QuerySets and filtering

x QuerySets
- A representation of a db query, allowing retrieval and filtering of data from models efficiently.
- DRF integrates with Django queryset API seemlessly allowing leverage of its powerful features

x Filtering
- One can filter querysets based on various criteria using filter() and exclude() methods, providing specific data subsets for API endpoints

x Pagination
- DRF supports pagination to handle large datasets efficiently, providing mechanisms to limit and navigate through paginated results

Example
- QuerySets to fetch data from db. QuerySets provide a flexible and powerful way to filter, order, and pginate your data. Example of a view that uses QuerySet:

# CODE
from rest_framework import generics
from models import MyModel
from .serializers import MyModelSerializer

class MyModelListCreateAPIView(generics.ListCreateAPIView):
    queryset = MyModel.objects.all()
    serializer_class = MyModelSerializer

    def get_queryset(self):
        queryset = self.queryset
        name_filter = self.request.query_params.get('name', None)
        if name_filter is not None:
            queryset = queryset.filter(name__icontains=name_filter)
        return queryset

# `MyModelListCreateAPIView` inherits from the `ListCreateAPIView` class provided by DRF. The `queryset` attribute is set to `MyModel.objects.all()`, which fetches all instances of the `MyModel` model. The `get_queryset()` method is overridden to add a dynamic filter based on the `name` query parameter

! Optimizing QuerySets for Performance
- Techniques

x 1. Select Related and Prefetch Related
- Optimize db queries by pre-fetching related data to avoid unnecessary db hits

x 2. Using Values and Values ListCreateAPIView
- Retrieve only specific fields instead of the entire model instance to reduce data transfer

x 3. Caching
- Cache frequently accessed querysets results to improve response times

! Additional Resources
1. DRF Serializers Documentation - https://intranet.alxswe.com/rltoken/ZvARQUUihKHt646dmrNmoA
2. DRF Querysets Documentation - https://intranet.alxswe.com/rltoken/sxmX5Kvb3on_8htr4bMK6w


!! ViewSets and Routers in DRF
- ViewSets and Routers promote code reusability and maintanability
- ViewSets encapsulate the logic for common CRUD operations on models 
- Routers automatically generate URL patterns based on ViewSets, reducing boilerplate code and ensuring consistent API structure

! ViewSets: Streamlining CRUD operations
- ViewSets provide a high level abstraction for creating API views that handle common CRUD operations on models. Instead of defining separate views for each action(e.g list, retrieve, create, update, delete) ViewSets group these actions together, reducing code duplication and promoting consistency

# CODE - example of a basic ViewSet

from rest_framework import ViewSets
from .models import MyModel
from .serializers import MyModelSerializer

class MyModelViewSet(viewsets.ModelViewSet):
    queryset = MyModel.objects.all()
    serializer_class = MyModelSerializer

# `MyModelViewSet` inherits from `ModelViewSet` class provided by DRF. The class automatically provides the following actions:
# list - Retrieve a list of model instances
# create - Create a new model instance
# retrieve - Retrieve a single model instance
# update - update a model instance
# partial_update - update a model instance with partial set of fields
# destroy - Delete a model instance

! Benefits of ViewSets
x Code reusability 
Reduces amount of code needed to define API endpoint for common CRUD operations

x Maintanability
Centralizes logic for related actions, making code easier to maintain and update

x Consistency
Ensures a consistent structure and behaviour across API endpoints


! Types of ViewSets
DRF provides several types of ViewSets, each offering diff levels of functionality

x ModelViewSet
- Provides a complete set of CRUD operations for a model, including list, retrieve, create, update, and delete actions

x ReadOnlyModelViewSet
- Offers read-only operations, such as list and retrieve, suitable for exposing data without allowing modifications

x ViewSet
- A base class that allows you to define custom actions and implement specific API behaviour


! Routers: Automatic URL Routing
- Used to automatically generate URL patterns for API endpoints based on the ViewSets you've defined. This helps reduce the amount of boilerplate code required to set up your API's URL structure

# CODE - Example of how to use a router

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import MyModelViewSet

router = DefaultRouter()
router.register(r'my-models', MyModelViewSet)

urlpatterns = [
    path('api/', include(router.urls)),
]

- We create a `DefaultRouter` instance and register the `MyModelViewSet` with it. The router automatically generates the following URL patterns
- GET/api/my-models/ : List all MyModel instances
- POST/api/my-models/ : Create a new MyModel instance
- GET/api/my-models/{id}/ : Retrieve a single MyModel instance
- PUT/api/my-model/{id}/ : update a MyModel instance
- PATCH/api/my-model/{id}/ : Partially update a MyModel instance
- DELETE/api/my-model/{id} : Delete a MyModel instance

x Benefits of Routers
1. Simplified URL configuration. Automatically generates URL patterns based on your ViewSets
2. Consistency. Ensures a consistent structure for API urls
3. Reduced boilerplate. Eliminates the need to write repetive URL patterns

x Router Types and Configurations
1. DefaultRouter - Creates standard API root view and generates URLs for ViewSet actions
2. SimpleRouter - Similar to DefaultRouter but without the API root view, suitable for simpler APIs
3. Custom Routers - Allows you to define custom routing logic for more complex API structures

! Combining ViewSets and Routers
- Helps create a concise and maintanable API endpoint configuration

# CODE
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import MyModelViewSet, AnotherModelViewSet

router = DefaultRouter()
router.register(r'my-models', MyModelViewSet)
router.register(r'another-models', AnotherModelViewSet)

urlpatterns = [
    path('api/', include(router.urls)),
    # Add any additional non-viewset-based endpoints here
]

# In this example two `ViewSets` have been registered `(MyModelViewSet and AnotherModelViewSet)` with the Router. The Router then automatically generates the appropriate URL patterns for the CRUD operations on both models

! Additional Resources
1. DRF ViewSets Documentation - https://intranet.alxswe.com/rltoken/iir4BjBfAxNQKjNZf0CDRw
2. DRF Routers Documentation - https://intranet.alxswe.com/rltoken/MFBg2HK8KUir_n-MTX2wKg


!! Authentication and Permissions in DRF
- Authentication schemes: token-based, session-based, OAuth

! Authentication in Django REST Framework
- Authentication verifies the identity of a user or client attempting to access your API

- Authentication Schemes:

x 1. Token Authentication
- Clients authenticate by providing a unique token in the rquest headers

x 2. Session Authentication
- Client's authenticate using Django's built-in session-based authentication

x 3. OAuth Authentication
- Clients Authenticate using OAuth 2.0 Protocol, which allows 3rd-party apps to access user data without requiring their credentials

- You can configure authentication globally in `settings.py` or at the view or viewset level using `authentication_classes` attribute

# CODE - e.g of how to implement token-based authentication in DRF
from rest_framework.authentication import TokenAuthentication
from rest_framework.permissions import IsAuthenticated
from rest_framework.views import APIView

class MyAPIView(APIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request):
        # Only authenticated users can access this view
        return Response({'message': 'Hello, authenticated user!'})

# `MyAPIView` class requires token-based authentication and the `IsAuthenticated` permission to access the get method

! Permission Policies in DRF
DRF provides a wide range of built-in permission classes to control access to API endpoints such as:
- `AllowAny` - Allows access to anyone, regardless of authentication status
- `IsAuthenticated` - Allows access only to authenticated users
- `IsAdminUser` - Allows access only to users with the is_staff flag set to True
- `IsOwner` - Allows access only to the owner of the resource

- Custom permission classes to implement more complex access control logic can be created.

# CODE - e.g of a custom permission class
from rest_framework.permission import BasePermission

class IsAdminOrReadOnly(BasePermission):
    def has_permission(self, request, view):
        if request.method in ['GET', 'HEAD', 'OPTIONS']:
            return True
        return request.user.is_staff

# `IsAdminOrReadOnly` permission class allows read-only access to everyone, but requires the user to be an admin (staff user) for any write operations

! Securing API Endpoints with Authentication and Permissions
- By combining authentication and permissions, you can secure your API endpoints and control access based on user roles and permissions e.g

# CODE
from rest_framework.authentication import TokenAuthentication
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from rest_framework.views import APIView

class MyModelListView(APIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request):
        # Only authenticated users can view the list of models
        queryset = MyModel.objects.all()
        serializer = MyModelSerializer(queryset, many=True)
        return Response(serializer.data)

class MyModelCreateView(APIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAdminUser]

    def post(self, request):
        # Only admin users can create new model instances
        serializer = MyModelSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(serializer.data, status=status.HTTP_201_CREATED)

- `MyModelListView` requires token-based authentication and the `IsAuthenticated` permission, which means only authenticated users can view the list of models. `MyModelCreateView` on the other hand, requires token based authentication and the `IsAdminUser` permission which means only admin users can create new model instances


! COMPLETE EXAMPLE
- The API allows users to list, create, retrieve, update and delete blog posts
- It enforces access control rules to ensure that only authenticated users can perform these operations, and that users can only modify posts they have created

- Key components:
A post model to represent blog posts:
    - A `PostSerializer` to handle the serilization and deserialization of Post instances
    - a custom `IsAuthorOrReadOnly` permission class to control access to Post instances
    - Two DRF views(`PostListCreateAPIView` and `PostRetrieveUpdateDestroyAPIView`) that leverage the authentication and permission classes to secure the API endpoints

# models.py
from django.db import models
from django.contrib.auth.models import user

class Post(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

# serializers.py
from rest_framework import serializers
from .models import Post

class PostSerializer(serializers.ModelSerializer):
    class Meta:
        model = Post
        fields = ['id', 'title', 'content', 'author', 'created_at']

# permissions.py
from rest_framework.permissions import BasePermission

class IsAuthorOrReadOnly(BasePermission):
    def has_object_permission(self, request, view, obj):
        if request.method in ['GET', 'HEAD', 'OPTIONS']:
            return True
        return obj.author == request.user

# views.py
from rest_framework import genetics
from rest_framework.authentication import TokenAuthentication
from rest_framework.permissions import IsAuthenticated
from .models import Post
from .serializers import PostSerializer
from .permissions import IsAdminOrReadOnly

class PostListCreateAPIView(generics.ListCreateAPIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated, IsAuthorOrReadOnly]
    queryset = Post.objects.all()
    serializer_class = PostSerializer

    def perform_create(self, serializer):
        serializer.save(author=self.request.user)

class PostRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated, IsAdminOrReadOnly]
    queryset = Post.objects.all()
    serializer_class = PostSerializer

# urls.py
from django.urls import path
from .views import PostListCreateAPIView, PostRetrieveUpdateDestroyAPIView

urlpatterns = [
    path('posts/', PostListCreateAPIView.as_view(), name='post-list-create'),
    path('posts/<int:pk>/', PostRetrieveUpdateDestroyAPIView.as_view(), name='post-retrieve-update-destroy'),
]


x Explanation
- The post model represents a blog post, with a title, content, author and created_at fields
- `PostSerializer` : responsible for serializing and deserializing the Post model instances
- `IsAuthorOrReadOnly` : custom permission class that allows read-only access to anyone but only allows the author of the post to perform CRUD operations on it
- `PostListCreateAPIView`: handles the list and create operations for the Post model. It requires token based authentication(`TokenAuthentication`) and the `IsAuthenticated` and `IsAuthorOrReadOnly` permissions. When creating a new post, the perform_create method is overridden to associate the current user as the author of the post
- `PostRetrieveUpdateDestroyAPIView` handles the retrieve, update and destroy operations for individual Post instances. It also requires token-based authentication and the `IsAuthenticated` and `IsAdminOrReadOnly` permissions
- `urls.py` file URL patterns for the two views are defined, allowing clients to access the post list and individeal post details

! Additional Resources
1. DRF Authentication Documentation - https://intranet.alxswe.com/rltoken/v1zijFalcGGmlXiIwZd4Dg
2. DRF Permissions Documentation - https://intranet.alxswe.com/rltoken/7ullC2koHvyTI96WF34T_Q
3. Tutorial 4: Authentication & Permissions - https://intranet.alxswe.com/rltoken/VQCnsvuId-zbC9Bq0fUnHg